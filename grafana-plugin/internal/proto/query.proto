syntax = "proto3";

package grql;

option go_package = "github.com/cedricziel/grql/internal/proto";

// Query service for SQL-like query language
service QueryService {
  // Execute a query and return results
  rpc ExecuteQuery(QueryRequest) returns (QueryResponse);
  
  // Stream query results for large datasets
  rpc StreamQuery(QueryRequest) returns (stream QueryResult);
}

// Request message containing the SQL-like query
message QueryRequest {
  string query = 1;
  map<string, string> parameters = 2;
  int32 limit = 3;
  int32 offset = 4;
}

// Response message containing query results
message QueryResponse {
  repeated QueryResult results = 1;
  QueryMetadata metadata = 2;
  string error = 3;
}

// Individual query result row
message QueryResult {
  map<string, Value> fields = 1;
}

// Value wrapper to support different data types
message Value {
  oneof value {
    string string_value = 1;
    int64 int_value = 2;
    double float_value = 3;
    bool bool_value = 4;
    bytes bytes_value = 5;
  }
}

// Metadata about query execution
message QueryMetadata {
  int64 rows_affected = 1;
  int64 execution_time_ms = 2;
  repeated ColumnInfo columns = 3;
}

// Column information
message ColumnInfo {
  string name = 1;
  string type = 2;
}